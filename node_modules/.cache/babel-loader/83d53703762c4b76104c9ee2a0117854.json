{"ast":null,"code":"import { DATA_SUCCESS, DATA_FAIL, SET_MESSAGE } from \"./types\";\nimport adminClientService from \"../services/adminClient.service\";\nexport const ClientAdd = (name, contact_person, mobile_no, email_id, address, location, pincode, warranty, site_name, site_location) => dispatch => {\n  return adminClientService.ClientAdd(name, contact_person, mobile_no, email_id, address, location, pincode, warranty, site_name, site_location).then(response => {\n    dispatch({\n      type: DATA_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve(response);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DATA_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const ClientList = () => dispatch => {\n  return adminClientService.ClientList().then(response => {\n    dispatch({\n      type: DATA_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve(response);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DATA_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const ClientInfo = client_id => dispatch => {\n  return adminClientService.ClientInfo(client_id).then(response => {\n    dispatch({\n      type: DATA_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve(response);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DATA_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const ClientUpdate = (client_id, name, contact_person, mobile_no, email_id, address, location, pincode, warranty, site_name, site_location) => dispatch => {\n  return adminClientService.ClientUpdate(client_id, name, contact_person, mobile_no, email_id, address, location, pincode, warranty, site_name, site_location).then(response => {\n    dispatch({\n      type: DATA_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve(response);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DATA_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const ClientDelete = client_id => dispatch => {\n  return adminClientService.ClientDelete(client_id).then(response => {\n    dispatch({\n      type: DATA_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve(response);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DATA_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["G:/harrjNew/src/actions/adminClient.js"],"names":["DATA_SUCCESS","DATA_FAIL","SET_MESSAGE","adminClientService","ClientAdd","name","contact_person","mobile_no","email_id","address","location","pincode","warranty","site_name","site_location","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","ClientList","ClientInfo","client_id","ClientUpdate","ClientDelete"],"mappings":"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","sourcesContent":["import {\n  DATA_SUCCESS,\n  DATA_FAIL,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport adminClientService from \"../services/adminClient.service\";\n\nexport const ClientAdd = (name, contact_person, mobile_no, email_id, address, location, pincode,warranty,site_name,site_location) => (dispatch) => {\n  return adminClientService.ClientAdd(name, contact_person, mobile_no, email_id, address, location, pincode,warranty,site_name,site_location).then(\n    (response) => {\n      dispatch({\n        type: DATA_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve(response);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DATA_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const ClientList = () => (dispatch) => {\n  return adminClientService.ClientList().then(\n    (response) => {\n      dispatch({\n        type: DATA_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve(response);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DATA_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const ClientInfo = (client_id) => (dispatch) => {\n  return adminClientService.ClientInfo(client_id).then(\n    (response) => {\n      dispatch({\n        type: DATA_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve(response);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DATA_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const ClientUpdate = (client_id, name, contact_person, mobile_no, email_id, address, location, pincode,warranty,site_name,site_location) => (dispatch) => {\n  return adminClientService.ClientUpdate(client_id, name, contact_person, mobile_no, email_id, address, location, pincode,warranty,site_name,site_location).then(\n    (response) => {\n      dispatch({\n        type: DATA_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve(response);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DATA_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\n\nexport const ClientDelete = (client_id) => (dispatch) => {\n  return adminClientService.ClientDelete(client_id).then(\n    (response) => {\n      dispatch({\n        type: DATA_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve(response);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DATA_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};"]},"metadata":{},"sourceType":"module"}