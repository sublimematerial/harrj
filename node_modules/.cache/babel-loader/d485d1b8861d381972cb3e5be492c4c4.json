{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, OTP_SUCCESS, OTP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, DATA_SUCCESS, DATA_FAIL } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const AdminLogin = (email_id, password) => dispatch => {\n  return AuthService.AdminLogin(email_id, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject(error);\n  });\n};\nexport const register = (name, mobile_no, email_id, password) => dispatch => {\n  return AuthService.register(name, mobile_no, email_id, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve(data);\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject(error);\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["G:/harrjNew/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","OTP_SUCCESS","OTP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","DATA_SUCCESS","DATA_FAIL","AuthService","AdminLogin","email_id","password","dispatch","then","data","type","payload","user","Promise","resolve","error","message","response","toString","reject","register","name","mobile_no","logout"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,QAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,WARF,EASEC,YATF,EAUEC,SAVF,QAWO,SAXP;AAaA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyBC,QAAD,IAAc;AAC9D,SAAOJ,WAAW,CAACC,UAAZ,CAAuBC,QAAvB,EAAiCC,QAAjC,EAA2CE,IAA3C,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,aADC;AAEPc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,CAAgBL,IAAhB,CAAP;AACD,GARI,EASJM,KAAD,IAAW;AACT,UAAMC,OAAO,GACVD,KAAK,CAACE,QAAN,IACCF,KAAK,CAACE,QAAN,CAAeR,IADhB,IAECM,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAFtB,IAGAD,KAAK,CAACC,OAHN,IAIAD,KAAK,CAACG,QAAN,EALF;AAOAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIAS,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,WADC;AAEPW,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACM,MAAR,CAAeJ,KAAf,CAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMK,QAAQ,GAAG,CAACC,IAAD,EAAMC,SAAN,EAAgBjB,QAAhB,EAAyBC,QAAzB,KAAuCC,QAAD,IAAc;AAC1E,SAAOJ,WAAW,CAACiB,QAAZ,CAAqBC,IAArB,EAA0BC,SAA1B,EAAoCjB,QAApC,EAA6CC,QAA7C,EAAuDE,IAAvD,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,aADC;AAEPc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,CAAgBL,IAAhB,CAAP;AACD,GARI,EASJM,KAAD,IAAW;AACT,UAAMC,OAAO,GACVD,KAAK,CAACE,QAAN,IACCF,KAAK,CAACE,QAAN,CAAeR,IADhB,IAECM,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAFtB,IAGAD,KAAK,CAACC,OAHN,IAIAD,KAAK,CAACG,QAAN,EALF;AAOAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIAS,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,WADC;AAEPW,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACM,MAAR,CAAeJ,KAAf,CAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMQ,MAAM,GAAG,MAAOhB,QAAD,IAAc;AACxCJ,EAAAA,WAAW,CAACoB,MAAZ;AAEAhB,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEX;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  OTP_SUCCESS,\n  OTP_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n  DATA_SUCCESS,\n  DATA_FAIL,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const AdminLogin = (email_id, password) => (dispatch) => {\n  return AuthService.AdminLogin(email_id, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n      \n      return Promise.resolve(data);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject(error);\n    }\n  );\n};\n\nexport const register = (name,mobile_no,email_id,password) => (dispatch) => {\n  return AuthService.register(name,mobile_no,email_id,password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n      \n      return Promise.resolve(data);\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject(error);\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};"]},"metadata":{},"sourceType":"module"}